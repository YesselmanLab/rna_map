%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Mon Jun  7 16:25:48 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGAAGAUAUGGUGUCCUGAACUACAGGCAACACUGGAAACAGUGUUGAACUACCUGCAGGACACCUAAGUCUUCAGUC\
) } def
/len { sequence length } bind def

/coor [
[98.75329590 400.76803589]
[98.75329590 385.76803589]
[98.75329590 370.76803589]
[98.75329590 355.76803589]
[98.75329590 340.76803589]
[98.75329590 325.76803589]
[98.75329590 310.76803589]
[98.75329590 295.76803589]
[98.75329590 280.76803589]
[98.75329590 265.76803589]
[86.39893341 254.52978516]
[85.86106873 237.50280762]
[97.94650269 225.02676392]
[97.37196350 210.03776550]
[96.79742432 195.04878235]
[96.22288513 180.05978394]
[95.64833832 165.07080078]
[95.07379913 150.08180237]
[94.49925995 135.09280396]
[93.92472076 120.10381317]
[93.35017395 105.11482239]
[91.26725769 103.22669220]
[89.78372192 100.53391266]
[89.19464111 97.24661255]
[89.71687317 93.67797852]
[91.45465088 90.21450806]
[94.37651062 87.27530670]
[96.66625214 72.45109558]
[98.95598602 57.62689209]
[101.24572754 42.80268478]
[102.10727692 27.82744789]
[101.53273773 12.83845520]
[100.95819092 -2.15053725]
[100.38365173 -17.13953018]
[99.80911255 -32.12852097]
[99.23457336 -47.11751556]
[98.66003418 -62.10650635]
[98.08548737 -77.09549713]
[88.89482117 -90.67724609]
[96.30402374 -105.30720520]
[112.69113922 -105.93534088]
[121.19850922 -91.91547394]
[113.07448578 -77.67004395]
[113.64902496 -62.68104935]
[114.22356415 -47.69205475]
[114.79810333 -32.70306396]
[115.37264252 -17.71407127]
[115.94718933 -2.72507811]
[116.52172852 12.26391411]
[117.09626770 27.25290680]
[119.11614227 28.86390114]
[120.62516022 31.37445259]
[121.28426361 34.59668350]
[120.82684326 38.22676468]
[119.09572601 41.87256622]
[116.06993866 45.09242630]
[113.78019714 59.91662979]
[111.49045563 74.74083710]
[109.20071411 89.56504059]
[108.33917236 104.54028320]
[108.91371155 119.52927399]
[109.48825073 134.51826477]
[110.06278992 149.50726318]
[110.63733673 164.49624634]
[111.21187592 179.48524475]
[111.78641510 194.47424316]
[112.36095428 209.46322632]
[112.93549347 224.45222473]
[123.91052246 232.52046204]
[128.09437561 245.27732849]
[124.14630890 257.90374756]
[113.75329590 265.76803589]
[113.75329590 280.76803589]
[113.75329590 295.76803589]
[113.75329590 310.76803589]
[113.75329590 325.76803589]
[113.75329590 340.76803589]
[113.75329590 355.76803589]
[113.75329590 370.76803589]
[113.75329590 385.76803589]
[113.75329590 400.76803589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[7 75]
[8 74]
[9 73]
[10 72]
[13 68]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[19 62]
[20 61]
[21 60]
[27 59]
[28 58]
[29 57]
[30 56]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
